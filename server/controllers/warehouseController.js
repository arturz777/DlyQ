const { Order, Warehouse } = require("../models/models");
const { Op } = require("sequelize");

class WarehouseController {
	// üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Å–∫–ª–∞–¥–∞
	async getWarehouseOrders(req, res) {
	  try {
		// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–∫–ª–∞–¥ —É –∞–¥–º–∏–Ω–∞ (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞–µ–º)
		let warehouse = await Warehouse.findOne({ where: { id: req.user.id } });
  
		if (!warehouse && req.user.role === "ADMIN") {
		  warehouse = await Warehouse.create({
			id: req.user.id,
			name: "–°–∫–ª–∞–¥ –ê–¥–º–∏–Ω–∞",
			status: "active",
		  });
		}
  
		if (!warehouse) {
		  return res.status(404).json({ message: "–°–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω." });
		}
  
    const orders = await Order.findAll({
      where: { warehouseStatus: { [Op.not]: "ready" }, warehouseId: warehouse.id },
      order: [["createdAt", "DESC"]],
  });

  const formattedOrders = orders.map((order) => ({
      ...order.toJSON(),
      orderDetails: order.orderDetails ? JSON.parse(order.orderDetails) : [],
      preorderDate: order.desiredDeliveryDate || null,
  }));

  return res.json(formattedOrders);
} catch (error) {
  return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
}
	}

  // üìå –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞ —Å–∫–ª–∞–¥–æ–º
  async acceptOrder(req, res) {
    try {
      const { id } = req.params;
      const { processingTime } = req.body; // –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω—É–∂–Ω–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const adminId = req.user.id; // ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω–∞)

      

      // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–∫–ª–∞–¥ (Warehouse)
      let warehouse = await Warehouse.findOne({ where: { id: adminId } });

      if (!warehouse) {
        warehouse = await Warehouse.create({
          id: adminId, // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
          name: "–°–∫–ª–∞–¥ ‚Ññ1", // –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
          status: "active",
        });
      }
	  
	  const order = await Order.findByPk(id);
      if (!order) {
        return res.status(404).json({ message: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // ‚úÖ –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ –∫ —Å–∫–ª–∞–¥—É
      order.warehouseStatus = "processing"; // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
      order.processingTime = processingTime; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      order.warehouseId = warehouse.id; // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ –∫ —Å–∫–ª–∞–¥—É
      order.status = "Waiting for courier"; 
      await order.save();

      const io = req.app.get("io"); // üî• –ü–æ–ª—É—á–∞–µ–º WebSocket-—Å–µ—Ä–≤–µ—Ä –∏–∑ `app`
      io.emit("warehouseOrder", order);
      io.emit("orderStatusUpdate", order); 

      
      return res.json(order);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ —Å–∫–ª–∞–¥–æ–º:", error);
      return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  }

  // üìå –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø–µ—Ä–µ–¥–∞—á–∞ –∫—É—Ä—å–µ—Ä—É
  async completeOrder(req, res) {
    try {
      const { id } = req.params;

      const order = await Order.findByPk(id);
      if (!order) {
        return res.status(404).json({ message: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      order.warehouseStatus = "ready"; // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–≥–æ—Ç–æ–≤"
      order.status = "Ready for pickup";
      await order.save();

      const io = req.app.get("io"); // üî• –ü–æ–ª—É—á–∞–µ–º WebSocket-—Å–µ—Ä–≤–µ—Ä
      io.emit("orderReady", order);
      io.emit("orderStatusUpdate", { id: order.id, status: order.status });  

      return res.json(order);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", error);
      return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  }
}

module.exports = new WarehouseController();
