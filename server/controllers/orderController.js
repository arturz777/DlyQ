// server/controllers/orderController.js
const sendEmail = require("../services/emailService");
const { Order, Device } = require("../models/models");
const getDistanceFromWarehouse = require("../utils/distance");
const { supabase } = require("../config/supabaseClient"); // ‚úÖ –ò–º–ø–æ—Ä—Ç Supabase
const uuid = require("uuid");

const calculateDeliveryCost = (totalPrice, distance) => {
  let baseCost = 2; // –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ 2‚Ç¨
  let distanceCost = distance * 0.5; // 0.5‚Ç¨ –∑–∞ –∫–º
  let deliveryCost = baseCost + distanceCost;
  let discount = Math.floor(totalPrice / 30) * 2; // –û–∫—Ä—É–≥–ª—è–µ–º –≤–Ω–∏–∑ (–∫–∞–∂–¥—ã–µ 30‚Ç¨ —Å–∫–∏–¥–∫–∞ -2‚Ç¨)

  // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –¥–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0‚Ç¨
  deliveryCost = Math.max(0, deliveryCost - discount);
  return parseFloat(deliveryCost.toFixed(2)); // –û–∫—Ä—É–≥–ª—è–µ–º
};

// –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const createOrder = async (req, res) => {
  try {
    const { formData, totalPrice, orderDetails } = req.body;
    const { firstName, lastName, email, phone, address, apartment, comment, latitude, longitude } =
      formData;

      const distance = getDistanceFromWarehouse(latitude, longitude);
      const deliveryPrice = calculateDeliveryCost(totalPrice, distance); 
      

    if (!orderDetails || orderDetails.length === 0) {
      throw new Error("orderDetails –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
    }

    const userId = req.user ? req.user.id : null;
    let warehouseId = userId;

    let deviceImageUrl = orderDetails[0]?.image || "https://example.com/placeholder.png";

    if (deviceImageUrl.startsWith("http")) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ URL, –∞ –Ω–µ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
      try {
        const response = await fetch(deviceImageUrl);
        if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å URL");

        const buffer = await response.arrayBuffer();
        const fileName = `orders/${uuid.v4()}${deviceImageUrl.substring(deviceImageUrl.lastIndexOf("."))}`;

        const { data, error } = await supabase.storage
          .from("images")
          .upload(fileName, Buffer.from(buffer), {
            contentType: "image/jpeg",
          });

        if (error) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Supabase:", error);
        } else {
          deviceImageUrl = `https://ujsitjkochexlcqrwxan.supabase.co/storage/v1/object/public/images/${fileName}`;
        }
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", error);
      }

      for (const item of orderDetails) {
        const device = await Device.findByPk(item.deviceId);
  
        if (!device) {
          return res.status(400).json({ message: `–¢–æ–≤–∞—Ä "${item.name}" –Ω–µ –Ω–∞–π–¥–µ–Ω.` });
        }
  
        if (device.quantity < item.count) {
          return res.status(400).json({ message: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞: ${item.name}. –û—Å—Ç–∞–ª–æ—Å—å ${device.quantity} —à—Ç.` });
        }
  
        // üî• **–£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑–µ**
        await device.update({ quantity: device.quantity - item.count });
      }

    }

    // –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ —Å —Ñ–æ—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const order = await Order.create({
      userId,
      totalPrice: totalPrice + deliveryPrice,
      deliveryPrice,
      status: "Pending",
      warehouseStatus: "pending",
      warehouseId,
      courierId: null,
      deliveryLat: latitude,   // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∏—Ä–æ—Ç—É
      deliveryLng: longitude, 
      deliveryAddress: address,
      deviceImage: deviceImageUrl,
      productName: orderDetails.length > 0 ? orderDetails[0].name : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä",
      orderDetails: JSON.stringify(orderDetails),
  });

  const io = req.app.get("io"); // üî• –ü–æ–ª—É—á–∞–µ–º WebSocket-—Å–µ—Ä–≤–µ—Ä –∏–∑ `app`
  io.emit("newOrder", order);
  
  const productsList = orderDetails
  .map((detail) => {
    const options = Object.entries(detail.selectedOptions || {})
      .map(([key, value]) => `${key}: ${value.value || value}`)
      .join(", ");
    return `- ${detail.name} (–∫–æ–ª: ${detail.count}, –æ–ø—Ü–∏–∏: ${options || "–Ω–µ—Ç"})`;
  })
  .join("\n");

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
    const subject = " –ó–∞–∫–∞–∑ !";
    const text = `
      –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:
      - ${firstName}${lastName}
      - ${email}${phone}
      ---------------------------------
      - ${productsList}
      - ${totalPrice} ‚Ç¨
      ----------------------------------
      –ê–¥—Ä–µ—Å: ${address}, –∫–≤–∞—Ä—Ç–∏—Ä–∞ ${apartment}
      ----------------------------------
      - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}
    `;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ –∫–ª–∏–µ–Ω—Ç—É
    await sendEmail(email, subject, text);
    res.status(201).json({ message: "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω" });
    
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞" });
  }
};

const getDeliveryCost = (req, res) => {
  const { totalPrice, lat, lon } = req.query;

  if (!totalPrice || !lat || !lon) {
    return res.status(400).json({ message: "–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å totalPrice, lat –∏ lon" });
  }

  const distance = getDistanceFromWarehouse(parseFloat(lat), parseFloat(lon));
  const deliveryCost = calculateDeliveryCost(parseFloat(totalPrice), distance);

  res.json({ deliveryCost });
};

const updateOrderStatus = async (req, res) => {
  try {
    const { orderId, newStatus } = req.body;

    // –ò—â–µ–º –∑–∞–∫–∞–∑
    const order = await Order.findByPk(orderId);
    if (!order) {
      return res.status(404).json({ message: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω." });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    order.status = newStatus;
    await order.save();

    res.json({ message: "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª—ë–Ω!", order });
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

const getUserOrders = async (req, res) => {
  try {
    const userId = req.user.id;

    const orders = await Order.findAll({
      where: { userId },
      order: [["createdAt", "DESC"]],
    });

    const formattedOrders = orders.map((order) => ({
      ...order.toJSON(),
      orderDetails: JSON.parse(order.orderDetails || "[]"), // ‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É JSON –≤ –º–∞—Å—Å–∏–≤
    }));

    res.json(formattedOrders);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤" });
  }
};

const getActiveOrder = async (req, res) => {
  try {
    
    const userId = req.user ? req.user.id : null;
    const order = await Order.findOne({
      where: { userId, status: "Pending" },
    });

    if (!order) {
      return res.json(null);
    }

    // ‚úÖ –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ formData (–ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ —Ç–∞–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)
    let orderItems = [];
    try {
      const parsedData = order.formData ? JSON.parse(order.formData) : {};
      orderItems = parsedData.orderDetails || []; // –ë–µ—Ä—ë–º —Ç–æ–≤–∞—Ä—ã
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ formData:", error);
    }

    // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –æ—Ç–≤–µ—Ç
    res.json({
      ...order.toJSON(),
      order_items: orderItems,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞." });
  }

  async function createOrder(req, res) {
    try {
      const { orderDetails } = req.body; // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∑–∞–∫–∞–∑–∞
  
      for (let item of orderDetails) {
        const device = await Device.findByPk(item.deviceId);
  
        if (!device) {
          return res.status(400).json({ message: `–¢–æ–≤–∞—Ä ${item.name} –Ω–µ –Ω–∞–π–¥–µ–Ω.` });
        }
  
        if (device.quantity < item.count) {
          return res.status(400).json({ message: `–¢–æ–≤–∞—Ä–∞ ${item.name} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ. –û—Å—Ç–∞–ª–æ—Å—å ${device.quantity} —à—Ç.` });
        }
      }
  
      // –ï—Å–ª–∏ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ - —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
      // ‚ùóÔ∏è –ó–¥–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑—É
  
      return res.json({ message: "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!" });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:", error);
      return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞." });
    }
  }

};

module.exports = {
  createOrder,
  getDeliveryCost,
  getUserOrders,
  getActiveOrder,
  updateOrderStatus,
};
