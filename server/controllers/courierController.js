const { Order, Courier } = require("../models/models");
const { Op } = require("sequelize");
const fetch = require("node-fetch");

class CourierController {
  // üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (—Ç–æ–ª—å–∫–æ –ù–ï –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∫—É—Ä—å–µ—Ä—É)

  async getActiveOrders(req, res) {
    try {
      const courierId = req.user.id;
      if (!courierId) {
        return res.status(401).json({ message: "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã." });
      }

      // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–Ω–ª–∞–π–Ω –ª–∏ –∫—É—Ä—å–µ—Ä
      const courier = await Courier.findByPk(courierId);
      if (!courier || courier.status !== "online") {
        return res.json([]); // –ï—Å–ª–∏ –æ—Ñ–ª–∞–π–Ω ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      }

      // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
      const orders = await Order.findAll({
        where: {
          status: { [Op.or]: ["Waiting for courier", "Ready for pickup"] },
          courierId: { [Op.is]: null }, // ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∏—Å–∫ NULL
        },
        order: [["createdAt", "DESC"]],
        attributes: [
          "id",
          "status",
          "deliveryLat",
          "deliveryLng",
          "deliveryAddress",
          "orderDetails",
        ],
      });

      if (orders.length === 0) {
        return res.json([]);
      }

      // ‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º `orderDetails`, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫)
      const formattedOrders = orders.map((order) => ({
        ...order.toJSON(),
        orderDetails: order.orderDetails ? JSON.parse(order.orderDetails) : [], // ‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON
      }));

      return res.json(formattedOrders);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:", error);
      return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  }

  // üîπ –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞ –∫—É—Ä—å–µ—Ä–æ–º
  async acceptOrder(req, res) {
    try {
      const { id } = req.params;
      const courierId = req.user.id;

      if (!courierId) {
        return res.status(401).json({ message: "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã." });
      }

      // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫—É—Ä—å–µ—Ä –≤ –±–∞–∑–µ
      let courier = await Courier.findByPk(courierId);
      if (!courier) {
        courier = await Courier.create({
          id: courierId,
          name: req.user.name || "–ê–¥–º–∏–Ω-–ö—É—Ä—å–µ—Ä",
          status: "offline",
        });
      }

      // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–∫–∞–∑
      const order = await Order.findByPk(id);

      if (!order) {
        return res.status(404).json({ message: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω." });
      }

      // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –º–æ–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å (Waiting for courier –∏–ª–∏ Ready for pickup)
      if (
        order.status !== "Waiting for courier" &&
        order.status !== "Ready for pickup"
      ) {
        return res
          .status(400)
          .json({ message: "–ó–∞–∫–∞–∑ —É–∂–µ –∑–∞–Ω—è—Ç –∏–ª–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∫—É—Ä—å–µ—Ä–∞." });
      }

      // ‚úÖ –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —É–∂–µ "Ready for pickup", –Ω–µ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å (—á—Ç–æ–±—ã –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –µ–≥–æ)
      if (order.status === "Ready for pickup") {
        order.courierId = courierId;
      } else {
        order.status = "Accepted";
        order.courierId = courierId;
      }

      await order.save(); // üî• –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è

      // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
      const io = req.app.get("io");

      // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
      return res.json({
        id: order.id,
        status: order.status, // –¢–µ–ø–µ—Ä—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π!
        deliveryLat: order.deliveryLat,
        deliveryLng: order.deliveryLng,
        deliveryAddress: order.deliveryAddress,
        courierId: order.courierId,
      });
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞:", error);
      return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  }

  // üîπ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫—É—Ä—å–µ—Ä–∞ (–æ–Ω–ª–∞–π–Ω/–æ—Ñ—Ñ–ª–∞–π–Ω)
  async toggleCourierStatus(req, res) {
    console.log("üöÄ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É —Å—Ç–∞—Ç—É—Å–∞", req.body);
    try {
      const { status } = req.body;
      const courierId = req.user.id;

      if (!courierId) {
        console.log("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç courierId");
        return res.status(401).json({ message: "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã." });
      }

      console.log(`üîÑ –ö—É—Ä—å–µ—Ä ${courierId} –º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–∞ ${status}`);
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫—É—Ä—å–µ—Ä
      const courier = await Courier.findByPk(courierId);
      if (!courier) {
        console.log("‚ùå –û—à–∏–±–∫–∞: –∫—É—Ä—å–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return res.status(404).json({ message: "–ö—É—Ä—å–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫—É—Ä—å–µ—Ä–∞
      courier.status = status;
      await courier.save();

       console.log("‚úÖ –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!");
      return res.json({ message: `–í—ã –≤ —Å—Ç–∞—Ç—É—Å–µ: ${status}` });
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ –∫—É—Ä—å–µ—Ä–∞:", error);
      return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  }

  async updateDeliveryStatus(req, res) {
    try {
        const { id } = req.params;
        const { status } = req.body;
        const courierId = req.user.id;

        if (!courierId) {
            return res.status(401).json({ message: "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã." });
        }

        const order = await Order.findByPk(id);
        if (!order) {
            return res.status(404).json({ message: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω." });
        }

        if (order.courierId !== courierId) {
            return res.status(403).json({ message: "–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç." });
        }

        // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        order.status = status;

        // ‚úÖ –ö–æ–≥–¥–∞ –∫—É—Ä—å–µ—Ä –∑–∞–±—Ä–∞–ª –∑–∞–∫–∞–∑, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –º–∞—Ä—à—Ä—É—Ç–∞
        if (order.status === "Picked up") {
            const estimatedTime = await calculateRouteTime(order);
            order.estimatedTime = estimatedTime; // ‚úÖ –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
        }

        await order.save();

        // üî• –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
        const io = req.app.get("io");
        io.emit("orderStatusUpdate", {
            id: order.id,
            status: order.status,
            estimatedTime: order.estimatedTime || null,
        });


        return res.json(order);
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:", error);
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
}


  // üìå –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ)
  async completeDelivery(req, res) {
    try {
      const { id } = req.params;
      const courierId = req.user.id;

      if (!courierId) {
        return res.status(401).json({ message: "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã." });
      }

      // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–∫–∞–∑
      const order = await Order.findByPk(id);
      if (!order) {
        return res.status(404).json({ message: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω." });
      }

      // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É –∫—É—Ä—å–µ—Ä—É
      if (order.courierId !== courierId) {
        return res
          .status(403)
          .json({ message: "–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç." });
      }

      // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
      order.status = "Delivered";
      order.estimatedTime = null;

      await order.save();

      // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
      const io = req.app.get("io");
      io.emit("orderStatusUpdate", {
        id: order.id,
        status: order.status,
        estimatedTime: null, // –í—Ä–µ–º—è –∏—Å—á–µ–∑–∞–µ—Ç —É –∫–ª–∏–µ–Ω—Ç–∞
      });

      return res.json(order);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏:", error);
      return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  }

  async updateCourierLocation(req, res) {
    try {
        const { lat, lng } = req.body;
        const courierId = req.user.id;

        if (!courierId) {
            return res.status(401).json({ message: "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã." });
        }

        if (!lat || !lng) {
            return res.status(400).json({ message: "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã." });
        }

        let courier = await Courier.findByPk(courierId);
        if (!courier) {
            return res.status(404).json({ message: "–ö—É—Ä—å–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω." });
        }

        // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫—É—Ä—å–µ—Ä–∞
        courier.currentLat = lat;
        courier.currentLng = lng;
        await courier.save();

        // üî• –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
        const io = req.app.get("io");
        io.emit("courierLocationUpdate", { courierId, lat, lng });

        return res.json({ message: "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!" });
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞:", error);
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
}


}

async function calculateRouteTime(order) {
  if (!order.deliveryLat || !order.deliveryLng) {
      return 15 * 60; // ‚ùó –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É 15 –º–∏–Ω—É—Ç
  }

  // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—å–µ—Ä–µ
  const courier = await Courier.findByPk(order.courierId);
  if (!courier || !courier.currentLat || !courier.currentLng) {
      return 15 * 60;
  }

  const API_KEY = "5b3ce3597851110001cf624889e39f2834a84a62aaca04f731838a64"; // üî• –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –∫–ª—é—á
  const url = `https://api.openrouteservice.org/v2/directions/driving-car?api_key=${API_KEY}&start=${courier.currentLng},${courier.currentLat}&end=${order.deliveryLng},${order.deliveryLat}`;

  try {
      const response = await fetch(url);
      const data = await response.json();


      if (data.features && data.features.length > 0) {
          const realTime = Math.round(data.features[0].properties.segments[0].duration);
          return realTime; // ‚úÖ –ù–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏ (—Å–µ–∫—É–Ω–¥—ã)
      } else {
          console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º 15 –º–∏–Ω—É—Ç.");
          return 15 * 60; // ‚ùó –ï—Å–ª–∏ API –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç ‚Äì —Å—Ç–∞–≤–∏–º –∑–∞–≥–ª—É—à–∫—É
      }
  } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞:", error);
      return 15 * 60; // ‚ùó –û—à–∏–±–∫–∞ ‚Äì —Å—Ç–∞–≤–∏–º –∑–∞–≥–ª—É—à–∫—É
  }
}




module.exports = new CourierController();
