// server/tasks.js
const schedule = require('node-schedule');
const { Op } = require('sequelize');
const fs = require('fs');
const path = require('path');
const { Order } = require('./models/models'); // –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥–µ–ª—å Order

const setupCleanupTask = () => {
    // –£–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –º–∏–Ω—É—Ç–∞- '* * * * *' 30 –¥–Ω–µ–π- '0 0 1 * *'
    schedule.scheduleJob('0 0 1 * *', async () => {
        try {
            const cutoffDate = new Date(new Date().getTime() - 30 * 24 * 60 * 60 * 1000); // // –∫–∞–∫–∏–µ –∑–∞–∫–∞–∑—ã —Å—á–∏—Ç–∞—é—Ç—Å—è "—Å—Ç–∞—Ä—ã–º–∏". —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π - 30 * 24 * 60 * 60 * 1000 , –°—Ç–∞—Ä—à–µ –º–∏–Ω—É—Ç—ã-  - 1 * 60 * 1000

            // –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑—ã —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
            const ordersToDelete = await Order.findAll({
                where: {
                    createdAt: { [Op.lt]: cutoffDate },
                },
            });

            // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–∫–∞–∑–∞–º–∏
            ordersToDelete.forEach((order) => {
                if (
                    order.deviceImage &&
                    !order.deviceImage.includes("placeholder.png") &&
                    order.deviceImage.startsWith("orders/") // ‚úÖ –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –∑–∞–∫–∞–∑–æ–≤
                ) {
                    const filePath = path.resolve(__dirname, "static", order.deviceImage);
                    if (fs.existsSync(filePath)) {
                        console.log(`üóë –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: ${filePath}`);
                        fs.unlinkSync(filePath);
                    } else {
                        console.warn(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
                    }
                }
            });

            // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            const deletedCount = await Order.destroy({
                where: {
                    createdAt: { [Op.lt]: cutoffDate },
                },
            });

            console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${deletedCount}`);
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–∫–∞–∑–æ–≤:", error);
        }
    });
};

module.exports = setupCleanupTask;
