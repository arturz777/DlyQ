import React, { useState, useEffect } from "react";
import { fetchActiveOrder, updateOrderStatus } from "../http/orderAPI";
import { useNavigate } from "react-router-dom";
import { io } from "socket.io-client";
import {
  MapContainer,
  TileLayer,
  Marker,
  Polyline,
  Popup,
} from "react-leaflet";
import "leaflet/dist/leaflet.css";
import L from "leaflet";
import styles from "./OrderSidebar.module.css";

const socket = io("https://zang-4.onrender.com");

const OrderSidebar = () => {
  const [order, setOrder] = useState(null);
  const [isOpen, setIsOpen] = useState(() => {
    return localStorage.getItem("orderSidebarOpen") === "true";
  });
  const [showIcon, setShowIcon] = useState(false);
  const [timeLeft, setTimeLeft] = useState(null);
  const [courierLocation, setCourierLocation] = useState(null);
  const [route, setRoute] = useState([]);
  const [routeTime, setRouteTime] = useState(null);
  const [isPreorder, setIsPreorder] = useState(false);
  const [preorderDate, setPreorderDate] = useState(null);
  const navigate = useNavigate();

  const loadOrder = async () => {
    try {
      const activeOrder = await fetchActiveOrder();

      if (activeOrder) {
        setOrder(activeOrder);
        setShowIcon(true);

        if (activeOrder.desiredDeliveryDate) {
          setIsPreorder(true);
          setPreorderDate(activeOrder.desiredDeliveryDate);
        } else {
          setIsPreorder(false);
          setPreorderDate(null);
        }

        let timeInSeconds = 0;

        if (activeOrder.processingTime) {
          const [value, unit] = activeOrder.processingTime.split(" "); // –†–∞–∑–¥–µ–ª—è–µ–º —á–∏—Å–ª–æ –∏ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è

          if (unit.includes("–º–∏–Ω")) {
            timeInSeconds = parseInt(value, 10) * 60; // –ú–∏–Ω—É—Ç—ã ‚Üí —Å–µ–∫—É–Ω–¥—ã
          } else if (unit.includes("–¥–Ω")) {
            timeInSeconds = parseInt(value, 10) * 24 * 60 * 60; // –î–Ω–∏ ‚Üí —Å–µ–∫—É–Ω–¥—ã
          }

          setTimeLeft(timeInSeconds);
        }

        if (activeOrder.courierLocation) {
          setCourierLocation(activeOrder.courierLocation);
        }

        if (
          activeOrder.deliveryLat &&
          activeOrder.deliveryLng &&
          activeOrder.courierLocation
        ) {
          fetchRoute(activeOrder.courierLocation, {
            lat: activeOrder.deliveryLat,
            lng: activeOrder.deliveryLng,
          });
        }
      } else {
        setOrder(null);
        setShowIcon(false);
      }
    } catch (error) {
      console.warn("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞:", error);
      setOrder(null);
      setShowIcon(false);
    }
  };

  useEffect(() => {
    loadOrder();

    const handleOrderUpdate = (updatedOrder) => {
      if (updatedOrder && updatedOrder.id) {
        setOrder((prevOrder) =>
          prevOrder && prevOrder.id === updatedOrder.id
            ? { ...prevOrder, ...updatedOrder }
            : prevOrder
        );
        setShowIcon(true);

        if (updatedOrder.desiredDeliveryDate) {
          setIsPreorder(true);
          setPreorderDate(updatedOrder.desiredDeliveryDate);
        } else {
          setIsPreorder(false);
          setPreorderDate(null);
        }

        if (
          updatedOrder.status === "Waiting for courier" &&
          updatedOrder.processingTime
        ) {
          const [value, unit] = updatedOrder.processingTime.split(" "); // –†–∞–∑–¥–µ–ª—è–µ–º —á–∏—Å–ª–æ –∏ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
          let timeInSeconds = 0;
        
          if (unit.includes("–º–∏–Ω")) {
            timeInSeconds = parseInt(value, 10) * 60; // –ú–∏–Ω—É—Ç—ã ‚Üí —Å–µ–∫—É–Ω–¥—ã
          } else if (unit.includes("–¥–Ω")) {
            timeInSeconds = parseInt(value, 10) * 24 * 60 * 60; // –î–Ω–∏ ‚Üí —Å–µ–∫—É–Ω–¥—ã
          }
        
          setTimeLeft(timeInSeconds);
        } else if (updatedOrder.status === "Picked up") {
          setTimeLeft(updatedOrder.estimatedTime || 15 * 60);
        } else if (
          updatedOrder.status === "Arrived at destination" ||
          updatedOrder.status === "Delivered"
        ) {
          setTimeLeft(null);
        }

        if (updatedOrder.courierLocation) {
          setCourierLocation(updatedOrder.courierLocation);
        }

        if (
          updatedOrder.deliveryLat &&
          updatedOrder.deliveryLng &&
          updatedOrder.courierLocation
        ) {
          fetchRoute(updatedOrder.courierLocation, {
            lat: updatedOrder.deliveryLat,
            lng: updatedOrder.deliveryLng,
          });
        }
      }
    };

    socket.on("orderStatusUpdate", handleOrderUpdate);
    socket.on("courierLocationUpdate", (location) => {
      setCourierLocation(location);
      if (order && order.deliveryLat && order.deliveryLng) {
        fetchRoute(location, {
          lat: order.deliveryLat,
          lng: order.deliveryLng,
        });
      }
    });

    window.addEventListener("orderUpdated", loadOrder);

    return () => {
      socket.off("orderStatusUpdate", handleOrderUpdate);
      socket.off("courierLocationUpdate");
      window.removeEventListener("orderUpdated", loadOrder);
    };
  }, []);

  useEffect(() => {
    if (timeLeft === null) return;

    const timer = setInterval(() => {
      setTimeLeft((prevTime) => (prevTime !== null ? prevTime - 1 : null));
    }, 1000);

    return () => clearInterval(timer);
  }, [timeLeft]);

  const formatTime = (seconds) => {
    if (seconds <= 0) return "0 —Å–µ–∫—É–Ω–¥"; // –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã—à–ª–æ
  
    const days = Math.floor(seconds / (24 * 60 * 60)); // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    const hours = Math.floor((seconds % (24 * 60 * 60)) / (60 * 60)); // –û—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∞—Å—ã
    const mins = Math.floor((seconds % (60 * 60)) / 60); // –û—Å—Ç–∞–≤—à–∏–µ—Å—è –º–∏–Ω—É—Ç—ã
    const secs = seconds % 60; // –û—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–µ–∫—É–Ω–¥—ã
  
    let result = "";
    if (days > 0) result += `${days} –¥–Ω `;
    if (hours > 0) result += `${hours} —á `;
    if (mins > 0) result += `${mins} –º–∏–Ω `;
    if (secs > 0 && days === 0 && hours === 0) result += `${secs} —Å–µ–∫`; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—É–Ω–¥—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –¥–Ω–µ–π/—á–∞—Å–æ–≤
  
    return result.trim(); // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
  };
  

  const fetchRoute = async (start, end) => {
    if (!start || !end) return;

    const API_KEY = "5b3ce3597851110001cf624889e39f2834a84a62aaca04f731838a64";
    const url = `https://api.openrouteservice.org/v2/directions/driving-car?api_key=${API_KEY}&start=${start.lng},${start.lat}&end=${end.lng},${end.lat}`;

    try {
      const response = await fetch(url);
      const data = await response.json();
      if (data.features && data.features.length > 0) {
        const coordinates = data.features[0].geometry.coordinates.map(
          (coord) => [coord[1], coord[0]]
        );
        setRoute(coordinates);

        const durationInSeconds =
          data.features[0].properties.segments[0].duration;
        setRouteTime(Math.round(durationInSeconds)); // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞:", error);
    }
  };

  const handleToggleSidebar = () => {
    setIsOpen((prevState) => {
      const newState = !prevState;
      localStorage.setItem("orderSidebarOpen", newState); // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
      return newState;
    });
  };

  // ‚úÖ –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–∫–∞–∑
  const handleCompleteOrder = async () => {
    if (!order) return;
    try {
      await updateOrderStatus(order.id, "Completed");
      setOrder(null); // ‚úÖ –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      setShowIcon(false); // ‚úÖ –£–±–∏—Ä–∞–µ–º –∏–∫–æ–Ω–∫—É
      window.dispatchEvent(new Event("orderUpdated"));
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", error);
    }
  };

  return (
    <>
      {showIcon && (
        <div className={styles.floatingIcon} onClick={() => setIsOpen(true)}>
          üì¶
        </div>
      )}

      {/* üõí –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ—Å—Ç–∞–≤–∫–µ */}
      <div className={`${styles.sidebar} ${isOpen ? styles.open : ""}`}>
        <div className={styles.header}>
          <h3>–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏</h3>
          <button onClick={() => setIsOpen(false)}>√ó</button>
        </div>

        {order ? (
          <div>
            {isPreorder ? (
              <p className={styles.preorderInfo}>
                <strong>–ü—Ä–µ–¥–∑–∞–∫–∞–∑:</strong> üìÖ –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞{" "}
                <span className={styles.preorderDate}>
                  {new Date(preorderDate).toLocaleString("ru-RU", {
                    year: "numeric",
                    month: "2-digit",
                    day: "2-digit",
                    hour: "2-digit",
                    minute: "2-digit",
                  })}
                </span>
              </p>
            ) : (
              <p>
                <strong>–°—Ç–∞—Ç—É—Å:</strong>
                <span className={styles.statusText}>
                  {!order?.status ||
                    (order?.status === "Pending" &&
                      "üïí –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞")}
                  {order?.status === "Waiting for courier" &&
                    "‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç —Å–∫–ª–∞–¥–æ–º"}
                  {order?.status === "Ready for pickup" &&
                    "üë®‚Äçüç≥ –ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤, –∂–¥–µ—Ç –∫—É—Ä—å–µ—Ä–∞"}
                  {order?.status === "Picked up" && "üöó –ö—É—Ä—å–µ—Ä –≤ –ø—É—Ç–∏"}
                  {order?.status === "Arrived at destination" &&
                    "üè† –ö—É—Ä—å–µ—Ä —É –¥–≤–µ—Ä–∏"}
                  {order?.status === "Delivered" &&
                    "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω"}
                </span>
              </p>
            )}

            {/* ‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ */}
            {!order.preorderDate &&
              order?.status === "Waiting for courier" &&
              timeLeft !== null && (
                <p>
                  <strong>–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:</strong> ‚è≥{" "}
                  {formatTime(timeLeft)}
                </p>
              )}

            {order?.status === "Picked up" && timeLeft !== null && (
              <p>
                <strong>–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏:</strong> üöó{" "}
                {formatTime(timeLeft)}
              </p>
            )}

            {/* üî• –ë—É–¥—É—â–µ–µ –º–µ—Å—Ç–æ –¥–ª—è –∫–∞—Ä—Ç—ã */}
            <div className={styles.mapContainer}>
              <MapContainer
                center={[order.deliveryLat, order.deliveryLng]}
                zoom={13}
                style={{ height: "300px", width: "100%" }}
              >
                <TileLayer
                  url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
                  attribution="&copy; OpenStreetMap"
                />
                <Marker
                  position={[order.deliveryLat, order.deliveryLng]}
                  icon={
                    new L.Icon({
                      iconUrl:
                        "https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png",
                      iconSize: [25, 41],
                    })
                  }
                />
                {courierLocation && (
                  <Marker
                    position={[courierLocation.lat, courierLocation.lng]}
                  />
                )}
                {route.length > 0 && (
                  <Polyline positions={route} color="blue" />
                )}
              </MapContainer>
            </div>

            {/* ‚úÖ –ö–Ω–æ–ø–∫–∞ ‚Äú–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω‚Äù */}
            {(order.status === "Delivered" || order.status === "Completed") && (
              <button
                className={styles.completeButton}
                onClick={handleCompleteOrder}
              >
                üöÄ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É
              </button>
            )}

            {/* üî• –ö–Ω–æ–ø–∫–∞ "–ú–æ–∏ –∑–∞–∫–∞–∑—ã" */}
            <button
              className={styles.orderHistoryButton}
              onClick={() => navigate("/profile")}
            >
              üìú –ú–æ–∏ –∑–∞–∫–∞–∑—ã
            </button>
          </div>
        ) : (
          <p>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.</p>
        )}
      </div>
    </>
  );
};

export default OrderSidebar;
