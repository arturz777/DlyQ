import React, { useState, useEffect } from "react";
import {
  fetchWarehouseOrders,
  acceptWarehouseOrder,
  completeWarehouseOrder,
} from "../http/warehouseAPI";
import { io } from "socket.io-client";
import styles from "./Warehouse.module.css";

const socket = io("https://dlyq-backend-staging.onrender.com");

const Warehouse = () => {
  const [orders, setOrders] = useState([]);
  const [selectedOrderId, setSelectedOrderId] = useState(null);
  const [showTimeOptions, setShowTimeOptions] = useState(false);
  const [timers, setTimers] = useState({});

  const playNotificationSound = () => {
    const audio = document.getElementById("notificationSound");
    if (audio) {
      audio.currentTime = 0;
      audio
        .play()
        .catch((error) =>
          console.error("üîä –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞:", error)
        );
    }
  };

  useEffect(() => {
    socket.on("newOrder", (newOrder) => {
      playNotificationSound();
      setOrders((prevOrders) => [...prevOrders, newOrder]);
      setTimeout(() => {
        loadOrders();
      }, 2000);
    });

    return () => {
      socket.off("newOrder");
    };
  }, []);

  const loadOrders = async () => {
    try {
      const data = await fetchWarehouseOrders();

      const ordersWithParsedDetails = data.map((order) => ({
        ...order,
        orderDetails:
          typeof order.orderDetails === "string"
            ? JSON.parse(order.orderDetails)
            : order.orderDetails,
      }));

      setOrders(ordersWithParsedDetails);

      const initialTimers = {};
      ordersWithParsedDetails.forEach((order) => {
        if (order.warehouseStatus === "processing" && order.processingTime) {
          const savedTime = localStorage.getItem(`timer_${order.id}`);
          if (savedTime) {
            initialTimers[order.id] = parseInt(savedTime, 10); /
          } else {
            const [minutes] = order.processingTime.split(" "); 
            initialTimers[order.id] = parseInt(minutes, 10) * 60; 
          }
        }
      });
      setTimers(initialTimers);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:", error);
    }
  };

  useEffect(() => {
    loadOrders();
  }, []);

  useEffect(() => {
    const interval = setInterval(() => {
      setTimers((prevTimers) => {
        const updatedTimers = { ...prevTimers };
        Object.keys(updatedTimers).forEach((orderId) => {
          updatedTimers[orderId] -= 1; 
          localStorage.setItem(`timer_${orderId}`, updatedTimers[orderId]);
        });
        return updatedTimers;
      });
    }, 1000);

    return () => clearInterval(interval);
  }, []);

  const formatTime = (seconds) => {
    if (seconds <= 0) return "‚è≥ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ";

    const days = Math.floor(seconds / (24 * 3600));
    const hours = Math.floor((seconds % (24 * 3600)) / 3600);
    const mins = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;

    if (days > 0) {
      return `${days} –¥–Ω ${hours} —á ${mins} –º–∏–Ω`;
    } else if (hours > 0) {
      return `${hours} —á ${mins} –º–∏–Ω`;
    } else {
      return `${mins} –º–∏–Ω ${secs} —Å–µ–∫`;
    }
  };

  const handleAcceptOrder = async (orderId) => {
    setSelectedOrderId(orderId);
    setShowTimeOptions(true);
  };

  const handleSelectProcessingTime = async (orderId, processingTime) => {
    try {
      await acceptWarehouseOrder(orderId, processingTime);

      const [value, unit] = processingTime.split(" "); 

      let timeInSeconds = 0;
      if (unit === "–º–∏–Ω—É—Ç" || unit === "–º–∏–Ω—É—Ç—ã") {
        timeInSeconds = parseInt(value, 10) * 60; 
      } else if (unit === "–¥–Ω–µ–π" || unit === "–¥–µ–Ω—å" || unit === "–¥–Ω—è") {
        timeInSeconds = parseInt(value, 10) * 24 * 60 * 60; 
      }

      localStorage.setItem(`timer_${orderId}`, timeInSeconds);

      setShowTimeOptions(false);
      setSelectedOrderId(null);
      loadOrders();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞:", error);
    }
  };

  const handleCompleteOrder = async (orderId) => {
    try {
      await completeWarehouseOrder(orderId);
      loadOrders();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", error);
    }
  };

  return (
    <div className={styles.WarehouseContainer}>
      <h1>–°–∫–ª–∞–¥</h1>
      {orders.length === 0 ? (
        <p>–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤</p>
      ) : (
        <ul>
          {orders.map((order) => (
            <li key={order.id}>
              <p>
                <strong>–ó–∞–∫–∞–∑ #{order.id}</strong>
              </p>
              <p>–¶–µ–Ω–∞: {Number(order.totalPrice).toFixed(2)} ‚Ç¨</p>
              <p>–°—Ç–∞—Ç—É—Å: {order.warehouseStatus}</p>

              {Array.isArray(order.orderDetails) &&
                order.orderDetails.some((item) => item.isPreorder) && (
                  <p className={styles.preorderWarning}>
                    üì¶ <strong>–≠—Ç–æ –ø—Ä–µ–¥–∑–∞–∫–∞–∑!</strong> –¢–æ–≤–∞—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞
                    —Å–∫–ª–∞–¥–µ.
                  </p>
                )}

              {order.preorderDate && order.preorderDate !== "null" && (
                <p className={styles.preorderInfo}>
                  üìÖ <strong>–ü—Ä–µ–¥–∑–∞–∫–∞–∑:</strong> –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞{" "}
                  <span>
                    {new Date(order.preorderDate).toLocaleString("ru-RU", {
                      year: "numeric",
                      month: "long",
                      day: "numeric",
                      hour: "2-digit",
                      minute: "2-digit",
                    })}
                  </span>
                </p>
              )}

              {order.warehouseStatus === "processing" && (
                <p>
                  ‚è≥ –í—Ä–µ–º—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {formatTime(timers[order.id] || 0)}
                </p>
              )}

              <p>
                <strong>–¢–æ–≤–∞—Ä—ã:</strong>
              </p>
              {Array.isArray(order.orderDetails) &&
              order.orderDetails.length > 0 ? (
                <ul>
                  {order.orderDetails.map((item, index) => (
                    <li key={index}>
                      <img
                        src={item.image}
                        alt={item.name}
                        width="50"
                        height="50"
                      />
                      {item.name} (x{item.count}) ‚Äî {item.price}‚Ç¨
                    </li>
                  ))}
                </ul>
              ) : (
                <p>‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
              )}

              {/* ‚úÖ –ö–Ω–æ–ø–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ */}
              {order.warehouseStatus === "pending" && (
                <>
                  <button onClick={() => handleAcceptOrder(order.id)}>
                    –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑
                  </button>
                  {selectedOrderId === order.id && showTimeOptions && (
                    <div className={styles.TimeOptions}>
                      <p>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:</p>
                      {[5, 10, 15, 25, 35, 45, 60].map((time) => (
                        <button
                          key={time}
                          onClick={() =>
                            handleSelectProcessingTime(
                              order.id,
                              `${time} –º–∏–Ω—É—Ç`
                            )
                          }
                        >
                          {time} –º–∏–Ω—É—Ç
                        </button>
                      ))}
                      {[1, 2, 3, 5, 10, 14, 18, 20, 25, 30].map((days) => (
                        <button
                          key={days}
                          onClick={() =>
                            handleSelectProcessingTime(order.id, `${days} –¥–Ω–µ–π`)
                          }
                        >
                          {days} {days === 1 ? "–¥–µ–Ω—å" : "–¥–Ω—è"}
                        </button>
                      ))}
                    </div>
                  )}
                </>
              )}
              {order.warehouseStatus === "processing" && (
                <>
                  <button onClick={() => handleCompleteOrder(order.id)}>
                    –ì–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ
                  </button>
                </>
              )}
            </li>
          ))}
        </ul>
      )}
    </div>
  );
};

export default Warehouse;

