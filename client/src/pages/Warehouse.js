import React, { useState, useEffect } from "react";
import { fetchWarehouseOrders, acceptWarehouseOrder, completeWarehouseOrder } from "../http/warehouseAPI";
import { io } from "socket.io-client";
import styles from "./Warehouse.module.css";

const socket = io("http://localhost:5000");

const Warehouse = () => {
  const [orders, setOrders] = useState([]);
  const [selectedOrderId, setSelectedOrderId] = useState(null); // ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
  const [showTimeOptions, setShowTimeOptions] = useState(false);
  const [timers, setTimers] = useState({}); 

  const playNotificationSound = () => {
    const audio = document.getElementById("notificationSound");
    if (audio) {
        audio.currentTime = 0; // –°–±—Ä–æ—Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        audio.play().catch((error) => console.error("üîä –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞:", error));
    }
};
  

  useEffect(() => {
    console.log("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket...");

    socket.on("newOrder", (newOrder) => {
      playNotificationSound();
      setOrders((prevOrders) => [...prevOrders, newOrder]);
      setTimeout(() => {
        loadOrders();
      }, 2000); // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    });

    return () => {
      socket.off("newOrder"); // ‚úÖ –û—Ç–ø–∏—Å–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    };
  }, []);

  const loadOrders = async () => {
    try {
      const data = await fetchWarehouseOrders();
  
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º orderDetails –≤ –º–∞—Å—Å–∏–≤ (–µ—Å–ª–∏ –æ–Ω–æ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏)
      const ordersWithParsedDetails = data.map((order) => ({
        ...order,
        orderDetails: typeof order.orderDetails === "string" ? JSON.parse(order.orderDetails) : order.orderDetails,
      }));
  
      setOrders(ordersWithParsedDetails);

      const initialTimers = {};
      ordersWithParsedDetails.forEach((order) => {
        if (order.warehouseStatus === "processing" && order.processingTime) {
          const savedTime = localStorage.getItem(`timer_${order.id}`);
          if (savedTime) {
            initialTimers[order.id] = parseInt(savedTime, 10); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
          } else {
            const [minutes] = order.processingTime.split(" "); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º "5 –º–∏–Ω—É—Ç" –≤ 5
            initialTimers[order.id] = parseInt(minutes, 10) * 60; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
          }
        }
      });
      setTimers(initialTimers);

    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:", error);
    }
  };

  useEffect(() => {
    loadOrders();
  }, []);
  
  useEffect(() => {
    const interval = setInterval(() => {
      setTimers((prevTimers) => {
        const updatedTimers = { ...prevTimers };
        Object.keys(updatedTimers).forEach((orderId) => {
          updatedTimers[orderId] -= 1; // –£–º–µ–Ω—å—à–∞–µ–º –≤—Ä–µ–º—è
          localStorage.setItem(`timer_${orderId}`, updatedTimers[orderId]); // –°–æ—Ö—Ä–∞–Ω—è–µ–º
        });
        return updatedTimers;
      });
    }, 1000);

    return () => clearInterval(interval);
  }, []);

  const formatTime = (seconds) => {
    const absSeconds = Math.abs(seconds);
    const mins = Math.floor(absSeconds / 60);
    const secs = absSeconds % 60;
    return `${seconds < 0 ? "-" : ""}${mins}:${secs < 10 ? "0" : ""}${secs}`;
  };

  const handleAcceptOrder = async (orderId) => {
    setSelectedOrderId(orderId); // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
    setShowTimeOptions(true); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
  };

  const handleSelectProcessingTime = async (orderId, processingTime) => {
    try {
      await acceptWarehouseOrder(orderId, processingTime);
      
      const [minutes] = processingTime.split(" ");
      localStorage.setItem(`timer_${orderId}`, parseInt(minutes, 10) * 60);

      setShowTimeOptions(false); // –°–∫—Ä—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
      setSelectedOrderId(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑
      loadOrders();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞:", error);
    }
  };
  

  const handleCompleteOrder = async (orderId) => {
    try {
      await completeWarehouseOrder(orderId);
      loadOrders();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", error);
    }
  };

  return (
    <div className={styles.WarehouseContainer}>
    <h1>–°–∫–ª–∞–¥</h1>
    {orders.length === 0 ? (
      <p>–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤</p>
    ) : (
      <ul>
        {orders.map((order) => (
          <li key={order.id}>
            <p><strong>–ó–∞–∫–∞–∑ #{order.id}</strong></p>
            <p>–¶–µ–Ω–∞: {Number(order.totalPrice).toFixed(2)} ‚Ç¨</p>
            <p>–°—Ç–∞—Ç—É—Å: {order.warehouseStatus}</p>
  
            {/* ‚úÖ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–µ—Å–ª–∏ –∑–∞–∫–∞–∑ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ) */}
            {order.warehouseStatus === "processing" && (
                <p>‚è≥ –í—Ä–µ–º—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {formatTime(timers[order.id] || 0)}</p>
              )}
  
            {/* ‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ */}
            <p><strong>–¢–æ–≤–∞—Ä—ã:</strong></p>
            {Array.isArray(order.orderDetails) && order.orderDetails.length > 0 ? (
              <ul>
                {order.orderDetails.map((item, index) => (
                  <li key={index}>
                    <img
                      src={`http://localhost:5000/${item.image}`}
                      alt={item.name}
                      width="50"
                      height="50"
                    />
                    {item.name} (x{item.count}) ‚Äî {item.price}‚Ç¨
                  </li>
                ))}
              </ul>
            ) : (
              <p>‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
            )}
  
            {/* ‚úÖ –ö–Ω–æ–ø–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ */}
            {order.warehouseStatus === "pending" && (
              <>
                <button onClick={() => handleAcceptOrder(order.id)}>–ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑</button>
                {selectedOrderId === order.id && showTimeOptions && (
                  <div className={styles.TimeOptions}>
                    <p>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:</p>
                    {[5, 10, 15, 25, 35, 45, 60].map((time) => (
                      <button
                        key={time}
                        onClick={() => handleSelectProcessingTime(order.id, `${time} –º–∏–Ω—É—Ç`)}
                      >
                        {time} –º–∏–Ω—É—Ç
                      </button>
                    ))}
                  </div>
                )}
              </>
            )}
            {order.warehouseStatus === "processing" && (
              <>
                <button onClick={() => handleCompleteOrder(order.id)}>–ì–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ</button>
              </>
            )}
          </li>
        ))}
      </ul>
    )}
  </div>
  
  );
};

export default Warehouse;
